{
    "github_id": 1004,
    "number": 4,
    "title": "Add error handling to external service client",
    "body": "Added error handling and logging to external service client to handle API failures gracefully.",
    "created_at": "2024-02-09T15:00:00Z",
    "comments": [
        {
            "github_id": 2007,
            "body": "Similar to how we handled database errors, good consistency",
            "user_login": "reviewer1"
        },
        {
            "github_id": 2008,
            "body": "Should we add circuit breaker pattern here too?",
            "user_login": "reviewer2"
        }
    ],
    "diffs": [
        {
            "file_path": "src/services/external_client.py",
            "change_type": "modify",
            "hunks": [
                {
                    "old_start": 20,
                    "old_lines": 4,
                    "new_start": 20,
                    "new_lines": 11,
                    "content": " async def call_external_api(self, endpoint: str, data: Dict) -> Dict:\n-    async with aiohttp.ClientSession() as session:\n-        async with session.post(self.base_url + endpoint, json=data) as response:\n-            return await response.json()\n+    try:\n+        async with aiohttp.ClientSession() as session:\n+            async with session.post(self.base_url + endpoint, json=data) as response:\n+                if response.status >= 500:\n+                    logger.error(f\"External API server error: {response.status}\")\n+                    raise ExternalAPIError(\"Server error\")\n+                elif response.status >= 400:\n+                    logger.error(f\"External API client error: {response.status}\")\n+                    raise ExternalAPIError(\"Client error\")\n+                return await response.json()\n+    except aiohttp.ClientError as e:\n+        logger.error(f\"Connection error to external API: {e}\")\n+        raise ExternalAPIError(\"Connection failed\") from e"
                }
            ]
        }
    ]
}
