{
    "github_id": 1002,
    "number": 2,
    "title": "Add error handling to API endpoints",
    "body": "Added error handling and logging to API endpoints to improve error reporting and debugging.",
    "created_at": "2024-02-09T13:00:00Z",
    "comments": [
        {
            "github_id": 2003,
            "body": "Should we add status codes to the error responses?",
            "user_login": "reviewer2"
        },
        {
            "github_id": 2004,
            "body": "Good idea, added HTTP status codes to the error responses",
            "user_login": "author1"
        }
    ],
    "diffs": [
        {
            "file_path": "src/api/endpoints.py",
            "change_type": "modify",
            "hunks": [
                {
                    "old_start": 15,
                    "old_lines": 4,
                    "new_start": 15,
                    "new_lines": 11,
                    "content": " @router.get(\"/users/{user_id}\")\n-async def get_user(user_id: int):\n-    user = await user_service.get_user(user_id)\n-    return user\n+async def get_user(user_id: int) -> Dict:\n+    try:\n+        user = await user_service.get_user(user_id)\n+        if not user:\n+            raise HTTPException(status_code=404, detail=\"User not found\")\n+        return user\n+    except DatabaseError as e:\n+        logger.error(f\"Database error while fetching user {user_id}: {e}\")\n+        raise HTTPException(status_code=500, detail=\"Internal server error\") from e\n+    except Exception as e:\n+        logger.error(f\"Unexpected error in get_user: {e}\")"
                },
                {
                    "old_start": 30,
                    "old_lines": 3,
                    "new_start": 37,
                    "new_lines": 9,
                    "content": " @router.post(\"/users\")\n-async def create_user(user_data: UserCreate):\n-    return await user_service.create_user(user_data)\n+async def create_user(user_data: UserCreate) -> Dict:\n+    try:\n+        user = await user_service.create_user(user_data)\n+        return user\n+    except ValidationError as e:\n+        logger.error(f\"Validation error in create_user: {e}\")\n+        raise HTTPException(status_code=400, detail=str(e))\n+    except Exception as e:\n+        logger.error(f\"Error creating user: {e}\")"
                }
            ]
        }
    ]
}
